<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.3.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.3.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-4.0.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-4.3.xsd ">


	 <!-- web.xml中shiro的filter对应的bean Shiro 的Web过滤器 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<!-- loginUrl认证提交地址，如果没有认证将会请求此地址进行认证，请求此地址 将由formAuthenticationFilter进行表单认证 -->
		<property name="loginUrl" value="/login.action" />
		
		<!-- 认证成功统一跳转到first.action，如果不配置，shiro认证成功自动到上一个请求路径 -->
	    <property name="successUrl" value="/first.action"/>

		<!-- 通过unauthorizedUrl指定没有权限操作时跳转页面 -->
		<!-- <property name="unauthorizedUrl" value="/systemerror.jsp" /> -->
		<!-- 自定义filter配置 -->
		<property name="filters">
			<map>
			     <!-- 同时登陆自动踢出过滤器 -->
			   <!-- <entry key="kickout" value-ref="kickoutSessionControlFilter"/> -->
			    <!--sessionTimeOut判断过滤器  -->
			   <!--  <entry key="sessionTimeOut" value-ref="SessionExpiredFilter"/> -->
				<!-- 将自定义 的FormAuthenticationFilter注入shiroFilter中 -->
				<entry key="authc" value-ref="formAuthenticationFilter" />
			</map>
		</property>

		<!-- 过虑器链定义，从上向下顺序执行，一般将/**放在最下边 -->
		<property name="filterChainDefinitions">
			<value>
				<!-- 拦截退出  -->
				/logout.action = logout
				<!-- 不拦截静态资源文件 -->
			    /fly-3.0/** = anon
				/fly-3.0/html/** = anon
				/fly-3.0/json/** = anon
				/fly-3.0/res/** = anon
				/fly-3.0/views/** = anon
				/fly-3.0/validatecode/** = anon
				
				/ = anon
				/index.jsp = anon
				/index.action = anon
				/goregist.action = anon
				/regist.action = anon
				/goforget.action = anon
				/gocase.action = anon
				/activate.action = anon
				/resetPassword.action = anon 
				/replacepassword.action = anon 
				/findPasswordEmail.action = anon
				/gohome.action = anon
				/findDiscussCount.action = anon
				/findDicussByPage.action = anon
				/detail.action = anon
			    /addReadCount.action = anon
				/editDiscuss.action = anon
				/storeDiscuss.action = anon 
				/submitreply.action = anon
				/findReplyContentByDiscid.action = anon
				
				
				/** =authc
			</value>
		</property>
	</bean>

	<!-- realm -->
	<bean id="jdbcRealm" class="com.purple.bbs.ssm.shiro.realm.BBSRealm">
		<!-- 将凭证匹配器设置到realm中，realm按照凭证匹配器的要求进行散列 -->
		<property name="credentialsMatcher" ref="credentialsMatcher" />
	</bean>
	<!-- 应用自定义凭证匹配器 -->
	<bean id="credentialsMatcher"
		class="com.purple.bbs.ssm.shiro.matcher.BBSCredentialsMatcher">
		<!-- 记录密码验证次数 -->
		<constructor-arg ref="cacheManager" />
		
		<property name="hashAlgorithmName" value="md5" />
		
		<property name="hashIterations" value="2" />
		
	</bean>

    <!-- 缓存管理器 -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:shiro-ehcache.xml" />
    </bean>
	
	<!-- 会话ID生成器 -->  
	<bean id="sessionIdGenerator"   
	class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>  
	
	<!-- SessionDao org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO  -->
	<bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.MemorySessionDAO">
   	    <property name="sessionIdGenerator" ref="sessionIdGenerator"/>
	</bean>
	

	<bean id="simpleCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg name="name" value="shiro.sesssion" />
		<property name="path" value="/" />
	</bean>
	
	
	<!-- 会话管理器 -->
	<bean id="sessionManager"
		class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		
		<property name="sessionDAO" ref="sessionDAO"/>
		
		<property name="sessionIdCookie" ref="simpleCookie"/>
		<!-- session的失效时长30分钟，单位毫秒 -->
		<property name="globalSessionTimeout" value="1800000" />
		<!-- 删除失效的session -->
		<property name="deleteInvalidSessions" value="true" />
		
	</bean>
	
	
	<bean id="kickoutSessionControlFilter" class="com.purple.bbs.ssm.shiro.filter.KickoutSessionControlFilter">  
        <property name="cacheManager" ref="cacheManager"/>  
        <property name="sessionManager" ref="sessionManager"/> 
        <!-- 是否踢出后来登录的，默认是false；即后者登录的用户踢出前者登录的用户 --> 
        <property name="kickoutAfter" value="false"/>  
        <!-- 同一个用户最大的会话数，默认1；比如2的意思是同一个用户允许最多同时两个人登录 -->
        <property name="maxSession" value="1"/>  
        <property name="kickoutUrl" value="/login.action"/>  
    </bean> 
    
    
   <!--  <bean id="SessionExpiredFilter" class="com.purple.ams.ssm.filter.SessionExpiredFilter"></bean> -->

	<!-- 自定义form认证过虑器
	基于Form表单的身份验证过滤器，不配置将也会注册此过虑器，表单中的用户账号、密码及loginurl将采用默认值，建议配置 -->
	<bean id="formAuthenticationFilter" class="com.purple.bbs.ssm.shiro.filter.BBSFormAuthenticationFilter">
		<!-- 表单中账号的input名称 -->
		<property name="usernameParam" value="username" />
		<!--表单中密码的input名称 -->
		<property name="passwordParam" value="password" />
	</bean>
	
	<!-- securityManager安全管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="jdbcRealm" />
		<!-- 注入缓存管理器 -->
		<property name="cacheManager" ref="cacheManager"></property>
		<!-- 注入session管理器 -->
		<property name="sessionManager" ref="sessionManager" />
	</bean>
	
	<!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->  
	<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">  
		<property name="staticMethod"   
		value="org.apache.shiro.SecurityUtils.setSecurityManager"/>  
	    <property name="arguments" ref="securityManager"/>  
	</bean>  
	
	<!-- Shiro生命周期处理器-->  
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>  
	
</beans>